#!/bin/bash
# search exploit db tool
# author: techgaun

exploit_remote="https://raw.githubusercontent.com/offensive-security/exploit-database/master/files.csv"
exploit_list_file="files.csv"
prog=$(basename $0)
default_err="Unknown error occurred"
desc="An exploit database search tool"
author="techgaun"
version="0.1"
red='\033[0;31m'
green='\033[0;32m'
nc='\033[0m'
casesearch=false
quiet=false
search_strs=

error() {
    msg="${1:-$default_err}"
    echo -e "${red}${msg}${nc}"
    exit 1
}

msg() {
    msg="${1:-nothing}"
    echo -e "${green}${msg}${nc}"
}

usage() {
    echo >&2 "${prog} - written by ${author}
Usage: ${prog} [options] [str1 [str2] ... [strN]]
Example: ${prog} linux root
         ${prog} php sql
         ${prog} -s php Sql
         ${prog} -h
Options:
         -s         Case sensitive search
         -h         Show help screen
         -u         Update exploit database
         -q         Quiet search; does not give verbose output
    "
    exit 0
}

sploit_init() {
    if [[ ! -f "${exploit_list_file}" ]]; then
        msg "Updating exploit database"
        if ! wget "${exploit_remote}" -O "${exploit_list_file}" > /dev/null 2>&1; then
            rm -f "${exploit_list_file}"
            error "Could not download exploit database"
        fi
        msg "Updated exploit database"
    fi
}

update() {
    rm -f ${exploit_list_file} && sploit_init
    exit 0
}

main() {
    local OPTIND
    if [[ "$#" -eq 0 ]]; then
        usage
    fi
    ARGS="-"
    for param in $@; do
        if [[ "${param:0:1}" == "-" ]]; then
            ARGS=${ARGS}${param:1}
            shift
            continue
        fi
        search_strs=("/${param}/ && ${search_strs}")
    done

    while getopts ":shuq" opt ${ARGS}; do
        case ${opt} in
            h) usage;;
            s) casesearch=true;;
            u) update;;
            q) quiet=true;;
            \?) usage;;
        esac
    done

    shift $(( $OPTIND - 1 ))
    ignore_case="BEGIN {IGNORECASE = 1} "
    if ${casesearch}; then
        ignore_case=
    fi
    search_strs=$(sed 's/ &&$//' <<< ${search_strs})
    result=$(awk "${ignore_case}${search_strs}" < ${exploit_list_file})
    width=$(tput cols)
    reduced_width=$((width - 3))
    desc_col=$((${reduced_width} / 3))
    git_col=$((${reduced_width} / 3))
    exploitdb_col=$((${reduced_width}/3))
    exploit_path=

    printf "%0.s-" $(eval echo {1..${width}})
    if ! ${quiet}; then
        printf "\n%-${desc_col}s|%-${git_col}s|%-${exploitdb_col}s" " Title" " Github URL " " exploit-db URL "
        echo
        printf "%0.s-" $(eval echo {1..${width}})
        git_base_url="https://github.com/offensive-security/exploit-database/blob/master/"
        exploitdb_url="http://www.exploit-db.com/exploits/"
        while read line; do
            line=(${line//,/ })
            echo "${line[2]}"
            printf "\n%-${desc_col}s|%-${git_col}s|%-${exploitdb_col}s" " ${line[2]}" " ${git_base_url}${line[1]}" " ${exploitdb_url}${line[0]}"
        done <<< ${result}
    else
        exploit_path=40
        desc_col=$((${reduced_width} - ${exploit_path}))
        printf "\n%0-${desc_col}s|%0-${exploit_path}s" " Title" " Path"
        echo
        printf "%0.s-" $(eval echo {1..${width}})
    fi
    echo
    printf "%0.s-" $(eval echo {1..${width}})
    result=(${result//,/ })

}

main "$@"
